// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: warcraft/cronjob.proto

package warcraft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WarcraftCronjobService_SearchCharacter_FullMethodName      = "/warcraft.WarcraftCronjobService/SearchCharacter"
	WarcraftCronjobService_SearchMedia_FullMethodName          = "/warcraft.WarcraftCronjobService/SearchMedia"
	WarcraftCronjobService_SearchKeystoneRating_FullMethodName = "/warcraft.WarcraftCronjobService/SearchKeystoneRating"
	WarcraftCronjobService_SearchGuild_FullMethodName          = "/warcraft.WarcraftCronjobService/SearchGuild"
	WarcraftCronjobService_SearchGuildRoster_FullMethodName    = "/warcraft.WarcraftCronjobService/SearchGuildRoster"
)

// WarcraftCronjobServiceClient is the client API for WarcraftCronjobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarcraftCronjobServiceClient interface {
	SearchCharacter(ctx context.Context, in *Search, opts ...grpc.CallOption) (*Profile, error)
	SearchMedia(ctx context.Context, in *Search, opts ...grpc.CallOption) (*Media, error)
	SearchKeystoneRating(ctx context.Context, in *Search, opts ...grpc.CallOption) (*KeystoneRating, error)
	SearchGuild(ctx context.Context, in *Search, opts ...grpc.CallOption) (*Guild, error)
	SearchGuildRoster(ctx context.Context, in *Search, opts ...grpc.CallOption) (*GuildRoster, error)
}

type warcraftCronjobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWarcraftCronjobServiceClient(cc grpc.ClientConnInterface) WarcraftCronjobServiceClient {
	return &warcraftCronjobServiceClient{cc}
}

func (c *warcraftCronjobServiceClient) SearchCharacter(ctx context.Context, in *Search, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, WarcraftCronjobService_SearchCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCronjobServiceClient) SearchMedia(ctx context.Context, in *Search, opts ...grpc.CallOption) (*Media, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Media)
	err := c.cc.Invoke(ctx, WarcraftCronjobService_SearchMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCronjobServiceClient) SearchKeystoneRating(ctx context.Context, in *Search, opts ...grpc.CallOption) (*KeystoneRating, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeystoneRating)
	err := c.cc.Invoke(ctx, WarcraftCronjobService_SearchKeystoneRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCronjobServiceClient) SearchGuild(ctx context.Context, in *Search, opts ...grpc.CallOption) (*Guild, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Guild)
	err := c.cc.Invoke(ctx, WarcraftCronjobService_SearchGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCronjobServiceClient) SearchGuildRoster(ctx context.Context, in *Search, opts ...grpc.CallOption) (*GuildRoster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuildRoster)
	err := c.cc.Invoke(ctx, WarcraftCronjobService_SearchGuildRoster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarcraftCronjobServiceServer is the server API for WarcraftCronjobService service.
// All implementations must embed UnimplementedWarcraftCronjobServiceServer
// for forward compatibility.
type WarcraftCronjobServiceServer interface {
	SearchCharacter(context.Context, *Search) (*Profile, error)
	SearchMedia(context.Context, *Search) (*Media, error)
	SearchKeystoneRating(context.Context, *Search) (*KeystoneRating, error)
	SearchGuild(context.Context, *Search) (*Guild, error)
	SearchGuildRoster(context.Context, *Search) (*GuildRoster, error)
	mustEmbedUnimplementedWarcraftCronjobServiceServer()
}

// UnimplementedWarcraftCronjobServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWarcraftCronjobServiceServer struct{}

func (UnimplementedWarcraftCronjobServiceServer) SearchCharacter(context.Context, *Search) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCharacter not implemented")
}
func (UnimplementedWarcraftCronjobServiceServer) SearchMedia(context.Context, *Search) (*Media, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMedia not implemented")
}
func (UnimplementedWarcraftCronjobServiceServer) SearchKeystoneRating(context.Context, *Search) (*KeystoneRating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchKeystoneRating not implemented")
}
func (UnimplementedWarcraftCronjobServiceServer) SearchGuild(context.Context, *Search) (*Guild, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGuild not implemented")
}
func (UnimplementedWarcraftCronjobServiceServer) SearchGuildRoster(context.Context, *Search) (*GuildRoster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGuildRoster not implemented")
}
func (UnimplementedWarcraftCronjobServiceServer) mustEmbedUnimplementedWarcraftCronjobServiceServer() {
}
func (UnimplementedWarcraftCronjobServiceServer) testEmbeddedByValue() {}

// UnsafeWarcraftCronjobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarcraftCronjobServiceServer will
// result in compilation errors.
type UnsafeWarcraftCronjobServiceServer interface {
	mustEmbedUnimplementedWarcraftCronjobServiceServer()
}

func RegisterWarcraftCronjobServiceServer(s grpc.ServiceRegistrar, srv WarcraftCronjobServiceServer) {
	// If the following call pancis, it indicates UnimplementedWarcraftCronjobServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WarcraftCronjobService_ServiceDesc, srv)
}

func _WarcraftCronjobService_SearchCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCronjobServiceServer).SearchCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCronjobService_SearchCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCronjobServiceServer).SearchCharacter(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCronjobService_SearchMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCronjobServiceServer).SearchMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCronjobService_SearchMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCronjobServiceServer).SearchMedia(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCronjobService_SearchKeystoneRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCronjobServiceServer).SearchKeystoneRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCronjobService_SearchKeystoneRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCronjobServiceServer).SearchKeystoneRating(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCronjobService_SearchGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCronjobServiceServer).SearchGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCronjobService_SearchGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCronjobServiceServer).SearchGuild(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCronjobService_SearchGuildRoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCronjobServiceServer).SearchGuildRoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCronjobService_SearchGuildRoster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCronjobServiceServer).SearchGuildRoster(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

// WarcraftCronjobService_ServiceDesc is the grpc.ServiceDesc for WarcraftCronjobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarcraftCronjobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warcraft.WarcraftCronjobService",
	HandlerType: (*WarcraftCronjobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchCharacter",
			Handler:    _WarcraftCronjobService_SearchCharacter_Handler,
		},
		{
			MethodName: "SearchMedia",
			Handler:    _WarcraftCronjobService_SearchMedia_Handler,
		},
		{
			MethodName: "SearchKeystoneRating",
			Handler:    _WarcraftCronjobService_SearchKeystoneRating_Handler,
		},
		{
			MethodName: "SearchGuild",
			Handler:    _WarcraftCronjobService_SearchGuild_Handler,
		},
		{
			MethodName: "SearchGuildRoster",
			Handler:    _WarcraftCronjobService_SearchGuildRoster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warcraft/cronjob.proto",
}
