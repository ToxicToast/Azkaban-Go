// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: warcraft/character.proto

package warcraft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WarcraftCharacterService_GetCharacters_FullMethodName              = "/warcraft.WarcraftCharacterService/GetCharacters"
	WarcraftCharacterService_GetCharactersById_FullMethodName          = "/warcraft.WarcraftCharacterService/GetCharactersById"
	WarcraftCharacterService_GetCharactersByCharacterId_FullMethodName = "/warcraft.WarcraftCharacterService/GetCharactersByCharacterId"
	WarcraftCharacterService_GetCharactersByUserId_FullMethodName      = "/warcraft.WarcraftCharacterService/GetCharactersByUserId"
	WarcraftCharacterService_GetCharactersByGuild_FullMethodName       = "/warcraft.WarcraftCharacterService/GetCharactersByGuild"
	WarcraftCharacterService_CreateCharacter_FullMethodName            = "/warcraft.WarcraftCharacterService/CreateCharacter"
	WarcraftCharacterService_UpdateCharacter_FullMethodName            = "/warcraft.WarcraftCharacterService/UpdateCharacter"
	WarcraftCharacterService_UpdateCharacterGuild_FullMethodName       = "/warcraft.WarcraftCharacterService/UpdateCharacterGuild"
	WarcraftCharacterService_UpdateCharacterMythic_FullMethodName      = "/warcraft.WarcraftCharacterService/UpdateCharacterMythic"
	WarcraftCharacterService_UpdateCharacterRaid_FullMethodName        = "/warcraft.WarcraftCharacterService/UpdateCharacterRaid"
	WarcraftCharacterService_UpdateCharacterMedia_FullMethodName       = "/warcraft.WarcraftCharacterService/UpdateCharacterMedia"
	WarcraftCharacterService_AssignCharacter_FullMethodName            = "/warcraft.WarcraftCharacterService/AssignCharacter"
)

// WarcraftCharacterServiceClient is the client API for WarcraftCharacterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarcraftCharacterServiceClient interface {
	GetCharacters(ctx context.Context, in *GetCharactersRequest, opts ...grpc.CallOption) (*GetCharactersResponse, error)
	GetCharactersById(ctx context.Context, in *GetCharacterByIdRequest, opts ...grpc.CallOption) (*Character, error)
	GetCharactersByCharacterId(ctx context.Context, in *GetCharacterByCharacterIdRequest, opts ...grpc.CallOption) (*Character, error)
	GetCharactersByUserId(ctx context.Context, in *GetCharacterByUserIdRequest, opts ...grpc.CallOption) (*GetCharactersResponse, error)
	GetCharactersByGuild(ctx context.Context, in *GetCharacterByGuildRequest, opts ...grpc.CallOption) (*GetCharactersResponse, error)
	CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*Character, error)
	UpdateCharacter(ctx context.Context, in *UpdateCharacterRequest, opts ...grpc.CallOption) (*Character, error)
	UpdateCharacterGuild(ctx context.Context, in *UpdateCharacterGuildRequest, opts ...grpc.CallOption) (*Character, error)
	UpdateCharacterMythic(ctx context.Context, in *UpdateCharacterMythicRequest, opts ...grpc.CallOption) (*Character, error)
	UpdateCharacterRaid(ctx context.Context, in *UpdateCharacterRaidRequest, opts ...grpc.CallOption) (*Character, error)
	UpdateCharacterMedia(ctx context.Context, in *UpdateCharacterMediaRequest, opts ...grpc.CallOption) (*Character, error)
	AssignCharacter(ctx context.Context, in *AssignCharacterRequest, opts ...grpc.CallOption) (*Character, error)
}

type warcraftCharacterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWarcraftCharacterServiceClient(cc grpc.ClientConnInterface) WarcraftCharacterServiceClient {
	return &warcraftCharacterServiceClient{cc}
}

func (c *warcraftCharacterServiceClient) GetCharacters(ctx context.Context, in *GetCharactersRequest, opts ...grpc.CallOption) (*GetCharactersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCharactersResponse)
	err := c.cc.Invoke(ctx, WarcraftCharacterService_GetCharacters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCharacterServiceClient) GetCharactersById(ctx context.Context, in *GetCharacterByIdRequest, opts ...grpc.CallOption) (*Character, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Character)
	err := c.cc.Invoke(ctx, WarcraftCharacterService_GetCharactersById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCharacterServiceClient) GetCharactersByCharacterId(ctx context.Context, in *GetCharacterByCharacterIdRequest, opts ...grpc.CallOption) (*Character, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Character)
	err := c.cc.Invoke(ctx, WarcraftCharacterService_GetCharactersByCharacterId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCharacterServiceClient) GetCharactersByUserId(ctx context.Context, in *GetCharacterByUserIdRequest, opts ...grpc.CallOption) (*GetCharactersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCharactersResponse)
	err := c.cc.Invoke(ctx, WarcraftCharacterService_GetCharactersByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCharacterServiceClient) GetCharactersByGuild(ctx context.Context, in *GetCharacterByGuildRequest, opts ...grpc.CallOption) (*GetCharactersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCharactersResponse)
	err := c.cc.Invoke(ctx, WarcraftCharacterService_GetCharactersByGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCharacterServiceClient) CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*Character, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Character)
	err := c.cc.Invoke(ctx, WarcraftCharacterService_CreateCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCharacterServiceClient) UpdateCharacter(ctx context.Context, in *UpdateCharacterRequest, opts ...grpc.CallOption) (*Character, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Character)
	err := c.cc.Invoke(ctx, WarcraftCharacterService_UpdateCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCharacterServiceClient) UpdateCharacterGuild(ctx context.Context, in *UpdateCharacterGuildRequest, opts ...grpc.CallOption) (*Character, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Character)
	err := c.cc.Invoke(ctx, WarcraftCharacterService_UpdateCharacterGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCharacterServiceClient) UpdateCharacterMythic(ctx context.Context, in *UpdateCharacterMythicRequest, opts ...grpc.CallOption) (*Character, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Character)
	err := c.cc.Invoke(ctx, WarcraftCharacterService_UpdateCharacterMythic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCharacterServiceClient) UpdateCharacterRaid(ctx context.Context, in *UpdateCharacterRaidRequest, opts ...grpc.CallOption) (*Character, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Character)
	err := c.cc.Invoke(ctx, WarcraftCharacterService_UpdateCharacterRaid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCharacterServiceClient) UpdateCharacterMedia(ctx context.Context, in *UpdateCharacterMediaRequest, opts ...grpc.CallOption) (*Character, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Character)
	err := c.cc.Invoke(ctx, WarcraftCharacterService_UpdateCharacterMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warcraftCharacterServiceClient) AssignCharacter(ctx context.Context, in *AssignCharacterRequest, opts ...grpc.CallOption) (*Character, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Character)
	err := c.cc.Invoke(ctx, WarcraftCharacterService_AssignCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarcraftCharacterServiceServer is the server API for WarcraftCharacterService service.
// All implementations must embed UnimplementedWarcraftCharacterServiceServer
// for forward compatibility.
type WarcraftCharacterServiceServer interface {
	GetCharacters(context.Context, *GetCharactersRequest) (*GetCharactersResponse, error)
	GetCharactersById(context.Context, *GetCharacterByIdRequest) (*Character, error)
	GetCharactersByCharacterId(context.Context, *GetCharacterByCharacterIdRequest) (*Character, error)
	GetCharactersByUserId(context.Context, *GetCharacterByUserIdRequest) (*GetCharactersResponse, error)
	GetCharactersByGuild(context.Context, *GetCharacterByGuildRequest) (*GetCharactersResponse, error)
	CreateCharacter(context.Context, *CreateCharacterRequest) (*Character, error)
	UpdateCharacter(context.Context, *UpdateCharacterRequest) (*Character, error)
	UpdateCharacterGuild(context.Context, *UpdateCharacterGuildRequest) (*Character, error)
	UpdateCharacterMythic(context.Context, *UpdateCharacterMythicRequest) (*Character, error)
	UpdateCharacterRaid(context.Context, *UpdateCharacterRaidRequest) (*Character, error)
	UpdateCharacterMedia(context.Context, *UpdateCharacterMediaRequest) (*Character, error)
	AssignCharacter(context.Context, *AssignCharacterRequest) (*Character, error)
	mustEmbedUnimplementedWarcraftCharacterServiceServer()
}

// UnimplementedWarcraftCharacterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWarcraftCharacterServiceServer struct{}

func (UnimplementedWarcraftCharacterServiceServer) GetCharacters(context.Context, *GetCharactersRequest) (*GetCharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacters not implemented")
}
func (UnimplementedWarcraftCharacterServiceServer) GetCharactersById(context.Context, *GetCharacterByIdRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharactersById not implemented")
}
func (UnimplementedWarcraftCharacterServiceServer) GetCharactersByCharacterId(context.Context, *GetCharacterByCharacterIdRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharactersByCharacterId not implemented")
}
func (UnimplementedWarcraftCharacterServiceServer) GetCharactersByUserId(context.Context, *GetCharacterByUserIdRequest) (*GetCharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharactersByUserId not implemented")
}
func (UnimplementedWarcraftCharacterServiceServer) GetCharactersByGuild(context.Context, *GetCharacterByGuildRequest) (*GetCharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharactersByGuild not implemented")
}
func (UnimplementedWarcraftCharacterServiceServer) CreateCharacter(context.Context, *CreateCharacterRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharacter not implemented")
}
func (UnimplementedWarcraftCharacterServiceServer) UpdateCharacter(context.Context, *UpdateCharacterRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCharacter not implemented")
}
func (UnimplementedWarcraftCharacterServiceServer) UpdateCharacterGuild(context.Context, *UpdateCharacterGuildRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCharacterGuild not implemented")
}
func (UnimplementedWarcraftCharacterServiceServer) UpdateCharacterMythic(context.Context, *UpdateCharacterMythicRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCharacterMythic not implemented")
}
func (UnimplementedWarcraftCharacterServiceServer) UpdateCharacterRaid(context.Context, *UpdateCharacterRaidRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCharacterRaid not implemented")
}
func (UnimplementedWarcraftCharacterServiceServer) UpdateCharacterMedia(context.Context, *UpdateCharacterMediaRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCharacterMedia not implemented")
}
func (UnimplementedWarcraftCharacterServiceServer) AssignCharacter(context.Context, *AssignCharacterRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignCharacter not implemented")
}
func (UnimplementedWarcraftCharacterServiceServer) mustEmbedUnimplementedWarcraftCharacterServiceServer() {
}
func (UnimplementedWarcraftCharacterServiceServer) testEmbeddedByValue() {}

// UnsafeWarcraftCharacterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarcraftCharacterServiceServer will
// result in compilation errors.
type UnsafeWarcraftCharacterServiceServer interface {
	mustEmbedUnimplementedWarcraftCharacterServiceServer()
}

func RegisterWarcraftCharacterServiceServer(s grpc.ServiceRegistrar, srv WarcraftCharacterServiceServer) {
	// If the following call pancis, it indicates UnimplementedWarcraftCharacterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WarcraftCharacterService_ServiceDesc, srv)
}

func _WarcraftCharacterService_GetCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCharacterServiceServer).GetCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCharacterService_GetCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCharacterServiceServer).GetCharacters(ctx, req.(*GetCharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCharacterService_GetCharactersById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCharacterServiceServer).GetCharactersById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCharacterService_GetCharactersById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCharacterServiceServer).GetCharactersById(ctx, req.(*GetCharacterByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCharacterService_GetCharactersByCharacterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterByCharacterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCharacterServiceServer).GetCharactersByCharacterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCharacterService_GetCharactersByCharacterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCharacterServiceServer).GetCharactersByCharacterId(ctx, req.(*GetCharacterByCharacterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCharacterService_GetCharactersByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCharacterServiceServer).GetCharactersByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCharacterService_GetCharactersByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCharacterServiceServer).GetCharactersByUserId(ctx, req.(*GetCharacterByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCharacterService_GetCharactersByGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterByGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCharacterServiceServer).GetCharactersByGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCharacterService_GetCharactersByGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCharacterServiceServer).GetCharactersByGuild(ctx, req.(*GetCharacterByGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCharacterService_CreateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCharacterServiceServer).CreateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCharacterService_CreateCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCharacterServiceServer).CreateCharacter(ctx, req.(*CreateCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCharacterService_UpdateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCharacterServiceServer).UpdateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCharacterService_UpdateCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCharacterServiceServer).UpdateCharacter(ctx, req.(*UpdateCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCharacterService_UpdateCharacterGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCharacterGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCharacterServiceServer).UpdateCharacterGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCharacterService_UpdateCharacterGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCharacterServiceServer).UpdateCharacterGuild(ctx, req.(*UpdateCharacterGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCharacterService_UpdateCharacterMythic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCharacterMythicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCharacterServiceServer).UpdateCharacterMythic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCharacterService_UpdateCharacterMythic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCharacterServiceServer).UpdateCharacterMythic(ctx, req.(*UpdateCharacterMythicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCharacterService_UpdateCharacterRaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCharacterRaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCharacterServiceServer).UpdateCharacterRaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCharacterService_UpdateCharacterRaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCharacterServiceServer).UpdateCharacterRaid(ctx, req.(*UpdateCharacterRaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCharacterService_UpdateCharacterMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCharacterMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCharacterServiceServer).UpdateCharacterMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCharacterService_UpdateCharacterMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCharacterServiceServer).UpdateCharacterMedia(ctx, req.(*UpdateCharacterMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarcraftCharacterService_AssignCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarcraftCharacterServiceServer).AssignCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarcraftCharacterService_AssignCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarcraftCharacterServiceServer).AssignCharacter(ctx, req.(*AssignCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WarcraftCharacterService_ServiceDesc is the grpc.ServiceDesc for WarcraftCharacterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarcraftCharacterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warcraft.WarcraftCharacterService",
	HandlerType: (*WarcraftCharacterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCharacters",
			Handler:    _WarcraftCharacterService_GetCharacters_Handler,
		},
		{
			MethodName: "GetCharactersById",
			Handler:    _WarcraftCharacterService_GetCharactersById_Handler,
		},
		{
			MethodName: "GetCharactersByCharacterId",
			Handler:    _WarcraftCharacterService_GetCharactersByCharacterId_Handler,
		},
		{
			MethodName: "GetCharactersByUserId",
			Handler:    _WarcraftCharacterService_GetCharactersByUserId_Handler,
		},
		{
			MethodName: "GetCharactersByGuild",
			Handler:    _WarcraftCharacterService_GetCharactersByGuild_Handler,
		},
		{
			MethodName: "CreateCharacter",
			Handler:    _WarcraftCharacterService_CreateCharacter_Handler,
		},
		{
			MethodName: "UpdateCharacter",
			Handler:    _WarcraftCharacterService_UpdateCharacter_Handler,
		},
		{
			MethodName: "UpdateCharacterGuild",
			Handler:    _WarcraftCharacterService_UpdateCharacterGuild_Handler,
		},
		{
			MethodName: "UpdateCharacterMythic",
			Handler:    _WarcraftCharacterService_UpdateCharacterMythic_Handler,
		},
		{
			MethodName: "UpdateCharacterRaid",
			Handler:    _WarcraftCharacterService_UpdateCharacterRaid_Handler,
		},
		{
			MethodName: "UpdateCharacterMedia",
			Handler:    _WarcraftCharacterService_UpdateCharacterMedia_Handler,
		},
		{
			MethodName: "AssignCharacter",
			Handler:    _WarcraftCharacterService_AssignCharacter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warcraft/character.proto",
}
